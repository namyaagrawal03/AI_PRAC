'''
def tsp(graph):
    n= len(graph)
    visited=[False]*n
    visited[0]=True
    tour=[0]

    for _ in range(n-1):
        current=tour[-1]
        min_distance=999

        for i in range(n):
            if visited[i]==False and min_distance>graph[current][i]:
                min_distance=graph[current][i]

                nearest=i
            
        tour.append(nearest)
        visited[nearest]=True

    tour.append(0)
        
    return tour




if __name__=="__main__":
    graph=[]

    n=int(input("Enter number of vertices: "))

    for i in range(n):
        row=[]
        for j in range(n):
            if i!=j:
                print("Enter cost from",i," to ",j)
                d=int(input())
                row.append(d)

            else:
                row.append(0)

        graph.append(row)

    tour=tsp(graph)
    total_cost=0
    for i in range (0, n):
        total_cost=total_cost+graph[tour[i]][tour[i+1]]
    
    print("Path: ", tour)
    print("cost:", total_cost)







'''
from itertools import permutations

def travellingSalesmanProblem(graph): 
    # Store all vertices apart from the source vertex
    vertex = [] 
    tour = [0]  # Start with the source vertex as the first node in the tour
    for i in range(n): 
        if i != 0: 
            vertex.append(i) 
 
    # Store minimum weight Hamiltonian Cycle 
    min_path = float('inf')  # Use float('inf') for infinity
    next_permutation = permutations(vertex)
    for i in next_permutation:
        current_pathweight = 0
        k = 0
        for j in i: 
            current_pathweight += graph[k][j] 
            k = j 
        current_pathweight += graph[k][0] 

        # Update minimum 
        if current_pathweight < min_path:
            min_path = current_pathweight
            tour = [0] + list(i) + [0]  # Update the tour with the current permutation
  
    return min_path, tour

if __name__=="__main__":
    graph=[]

    n=int(input("Enter number of vertices: "))

    for i in range(n):
        row=[]
        for j in range(n):
            if i!=j:
                print("Enter cost from",i," to ",j)
                d=int(input())
                row.append(d)

            else:
                row.append(0)

        graph.append(row)

    
    print(travellingSalesmanProblem(graph))
